name: Build and Deploy Docker

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow only when a tag starting with 'v' is pushed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract tag name
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./build/docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/p3o:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/p3o:${{ steps.tag.outputs.version }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/p3o:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/p3o:buildcache,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e  # Stop script on any error

            # Define the project directory
            PROJECT_DIR="/home/${{ secrets.SERVER_USERNAME }}/project-name"

            # Ensure the directory exists
            mkdir -p $PROJECT_DIR

            # Navigate to the project directory
            cd $PROJECT_DIR

            # Check if the repo exists; if not, clone it
            if [ ! -d ".git" ]; then
              git clone --depth=1 https://github.com/h-varmazyar/p3o.git .
            fi

            # Fetch the latest changes for the tag that triggered the action
            git fetch --tags

            # Checkout the tag that triggered the workflow
            git checkout tags/${{ steps.tag.outputs.version }}
            
            # Export VERSION as an environment variable
            export VERSION=${{ steps.tag.outputs.version }}
            
            # Create or update .env file with VERSION
            echo "VERSION=${VERSION}" > .env

            # Pull the latest Docker image
            sudo docker pull docker.iranserver.com/${{ secrets.DOCKERHUB_USERNAME }}/p3o:${{ steps.tag.outputs.version }}

            # Restart the application with Docker Compose
            sudo VERSION=${VERSION} docker-compose -f ./deploy/compose/production/compose.yml down
            sudo VERSION=${VERSION} docker-compose -f ./deploy/compose/production/compose.yml up -d

            # Clean up old Docker images
            sudo docker image prune -af
            
