name: Build and Deploy Docker

on:
  push:
    tags:
      - 'v*' # This will trigger the workflow only when a tag starting with 'v' is pushed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract tag name
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./build/docker/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/p3o:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/p3o:${{ steps.tag.outputs.version }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/p3o:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/p3o:buildcache,mode=max

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Pull the latest image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/p3o:${{ steps.tag.outputs.version }}
            
            # Create or update .env file if needed
            # echo "TAG=${{ steps.tag.outputs.version }}" > .env
            
            # Navigate to the directory with docker-compose file
            cd /path/to/your/project
            
            # Update the docker-compose file to use the new image tag
            # This assumes your service is named 'app' in the compose file
            # You may need to adjust this command based on your compose file structure
            sed -i 's|image: ${{ secrets.DOCKERHUB_USERNAME }}/p3o:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/p3o:${{ steps.tag.outputs.version }}|g' ./deploy/compose/production/compose.yml
            
            # Deploy with docker-compose
            docker-compose -f ./deploy/compose/production/compose.yml down
            docker-compose -f ./deploy/compose/production/compose.yml up -d
            
            # Clean up old images (optional)
            docker image prune -af

